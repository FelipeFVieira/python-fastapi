from fastapi import FastAPI, APIRouter

# Initializing FastAPI
app = FastAPI()

items = {"1": "Item 1", "2": "Item 2", "3": "Item 3"}

# Router is used to create routes to each endpoint, here we can use a prefix
router = APIRouter()

# Setting route to each endpoint

# Route to get all items, using the prefix, it will be /api/v1/read
@router.get("/read")
def read_items():
    return items

# Route to add an item, using the prefix, it will be /api/v1/add/{item_name}
@router.post("/add/{item_name}")
def add_item(item_name: str):
    items[str(len(items) + 1)] = item_name
    return {"message": f"Item {item_name} added!"}

# Route to update an item, using the prefix, it will be /api/v1/update/{item_id}
@router.put("/update/{item_id}")
def update_item(item_id: str, item: dict):
    items[item_id] = item["name"]
    return {"message": f"Item {item['name']} updated!"}

# Route to delete an item, using the prefix, it will be /api/v1/delete/{item_id}
@router.delete("/delete/{item_id}")
def delete_item(item_id: str):
    del items[item_id]
    return {"message": f"Item {item_id} deleted!"}

# Including the router to API and setting the prefix
app.include_router(router, prefix="/api/v1")

# Additional parameters that may be useful in the future with router

### tags ###
# Description: Adds tags to router routes, useful for grouping in documentation generated by Swagger.
# Example: app.include_router(router, tags=["Items"])

### dependencies ###
# Description: Define globals depencencies that will be applied to all endpoints from router.
# Example: app.include_router(router, dependencies=[Depends(get_token_header)])
# With this example all endpoints from router will need a token to be accessed

### responses ###
# Description: Define responses that will be applied to all endpoints from router.
# Example: app.include_router(router, responses={404: {"description": "Not found"}})




